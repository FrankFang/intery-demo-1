package main

import (
	"context"
	"fmt"
	"os"

	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/mount"
	"github.com/docker/docker/client"
	"github.com/docker/go-connections/nat"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

func playground() {
	path, _ := os.Getwd()
	fmt.Println(path)
}

func temp() {
	currentDir, _ := os.Getwd()
	// 创建客户端
	ctx := context.Background()
	cli, err := client.NewClientWithOpts(client.FromEnv)
	if err != nil {
		panic(err)
	}

	config := container.Config{
		Image: "nginx",
	}
	hostConfig := container.HostConfig{
		Mounts: []mount.Mount{
			{
				Type:   "bind",
				Target: "/usr/share/nginx/html",
				Source: currentDir + "/html",
			},
		},
		PortBindings: nat.PortMap{
			"80/tcp": []nat.PortBinding{
				{
					HostIP:   "",
					HostPort: "7777",
				},
			},
		},
	}
	// 用客户端创建容器
	body, err := cli.ContainerCreate(ctx, &config, &hostConfig, nil, nil, "")
	if err != nil {
		panic(err)
	}
	fmt.Println(body.ID)
	// 以 -d 选项启动容器
	if err := cli.ContainerStart(ctx, body.ID, types.ContainerStartOptions{}); err != nil {
		panic(err)
	}

	// 获取容器列表
	containers, err := cli.ContainerList(context.Background(), types.ContainerListOptions{})
	if err != nil {
		panic(err)
	}

	for _, container := range containers {
		fmt.Printf("%s %s\n", container.ID[:10], container.Image)
	}
	fmt.Println("done")
	//////////////////////////////////
	dsn := "host=psql1 user=intery password=123456 port=5432"
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	// Migrate the schema
	db.AutoMigrate(&Product{})

	// Create
	db.Create(&Product{Code: "D42", Price: 100})

	// Read
	var product Product
	db.First(&product, 1)                 // find product with integer primary key
	db.First(&product, "code = ?", "D42") // find product with code D42

	// Update - update product's price to 200
	db.Model(&product).Update("Price", 200)
	// Update - update multiple fields
	db.Model(&product).Updates(Product{Price: 200, Code: "F42"}) // non-zero fields
	db.Model(&product).Updates(map[string]interface{}{"Price": 200, "Code": "F42"})

	// Delete - delete product
	// db.Delete(&product, 1)
}
// 
	/*
		{
			login: "FrankFang",
			id: 839559,
			node_id: "MDQ6VXNlcjgzOTU1OQ==",
			avatar_url: "https://avatars.githubusercontent.com/u/839559?v=4",
			gravatar_id: "",
			url: "https://api.github.com/users/FrankFang",
			html_url: "https://github.com/FrankFang",
			followers_url: "https://api.github.com/users/FrankFang/followers",
			following_url: "https://api.github.com/users/FrankFang/following{/other_user}",
			gists_url: "https://api.github.com/users/FrankFang/gists{/gist_id}",
			starred_url: "https://api.github.com/users/FrankFang/starred{/owner}{/repo}",
			subscriptions_url: "https://api.github.com/users/FrankFang/subscriptions",
			organizations_url: "https://api.github.com/users/FrankFang/orgs",
			repos_url: "https://api.github.com/users/FrankFang/repos",
			events_url: "https://api.github.com/users/FrankFang/events{/privacy}",
			received_events_url: "https://api.github.com/users/FrankFang/received_events",
			type: "User",
			site_admin: false,
			name: "Frank Fang",
			company: "@jirengu-inc ",
			blog: "https://fangyinghang.com/",
			location: "Hangzhou, China",
			email: null,
			hireable: null,
			bio: "Former Tencent Employee & Working at Alibaba.",
			twitter_username: null,
			public_repos: 366,
			public_gists: 94,
			followers: 2765,
			following: 112,
			created_at: "2011-06-09T09:16:40Z",
			updated_at: "2021-11-22T05:33:19Z"
			}
	*/