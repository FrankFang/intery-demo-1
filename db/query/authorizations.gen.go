// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"intery/server/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newAuthorization(db *gorm.DB) authorization {
	_authorization := authorization{}

	_authorization.authorizationDo.UseDB(db)
	_authorization.authorizationDo.UseModel(&model.Authorization{})

	tableName := _authorization.authorizationDo.TableName()
	_authorization.ALL = field.NewField(tableName, "*")
	_authorization.ID = field.NewUint(tableName, "id")
	_authorization.CreatedAt = field.NewTime(tableName, "created_at")
	_authorization.UpdatedAt = field.NewTime(tableName, "updated_at")
	_authorization.DeletedAt = field.NewField(tableName, "deleted_at")
	_authorization.Provider = field.NewString(tableName, "provider")
	_authorization.UserId = field.NewUint(tableName, "user_id")
	_authorization.VendorId = field.NewString(tableName, "vendor_id")
	_authorization.Login = field.NewString(tableName, "login")
	_authorization.Name = field.NewString(tableName, "name")
	_authorization.AvatarUrl = field.NewString(tableName, "avatar_url")
	_authorization.ReposUrl = field.NewString(tableName, "repos_url")
	_authorization.Raw = field.NewString(tableName, "raw")
	_authorization.AccessToken = field.NewString(tableName, "access_token")
	_authorization.TokenType = field.NewString(tableName, "token_type")
	_authorization.RefreshToken = field.NewString(tableName, "refresh_token")
	_authorization.Expiry = field.NewTime(tableName, "expiry")
	_authorization.TokenGeneratedAt = field.NewTime(tableName, "token_generated_at")

	_authorization.fillFieldMap()

	return _authorization
}

type authorization struct {
	authorizationDo authorizationDo

	ALL              field.Field
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	Provider         field.String
	UserId           field.Uint
	VendorId         field.String
	Login            field.String
	Name             field.String
	AvatarUrl        field.String
	ReposUrl         field.String
	Raw              field.String
	AccessToken      field.String
	TokenType        field.String
	RefreshToken     field.String
	Expiry           field.Time
	TokenGeneratedAt field.Time

	fieldMap map[string]field.Expr
}

func (a authorization) As(alias string) *authorization {
	a.authorizationDo.DO = *(a.authorizationDo.As(alias).(*gen.DO))

	a.ALL = field.NewField(alias, "*")
	a.ID = field.NewUint(alias, "id")
	a.CreatedAt = field.NewTime(alias, "created_at")
	a.UpdatedAt = field.NewTime(alias, "updated_at")
	a.DeletedAt = field.NewField(alias, "deleted_at")
	a.Provider = field.NewString(alias, "provider")
	a.UserId = field.NewUint(alias, "user_id")
	a.VendorId = field.NewString(alias, "vendor_id")
	a.Login = field.NewString(alias, "login")
	a.Name = field.NewString(alias, "name")
	a.AvatarUrl = field.NewString(alias, "avatar_url")
	a.ReposUrl = field.NewString(alias, "repos_url")
	a.Raw = field.NewString(alias, "raw")
	a.AccessToken = field.NewString(alias, "access_token")
	a.TokenType = field.NewString(alias, "token_type")
	a.RefreshToken = field.NewString(alias, "refresh_token")
	a.Expiry = field.NewTime(alias, "expiry")
	a.TokenGeneratedAt = field.NewTime(alias, "token_generated_at")

	a.fillFieldMap()

	return &a
}

func (a *authorization) WithContext(ctx context.Context) *authorizationDo {
	return a.authorizationDo.WithContext(ctx)
}

func (a authorization) TableName() string { return a.authorizationDo.TableName() }

func (a *authorization) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f.(field.OrderExpr), true
}

func (a *authorization) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["provider"] = a.Provider
	a.fieldMap["user_id"] = a.UserId
	a.fieldMap["vendor_id"] = a.VendorId
	a.fieldMap["login"] = a.Login
	a.fieldMap["name"] = a.Name
	a.fieldMap["avatar_url"] = a.AvatarUrl
	a.fieldMap["repos_url"] = a.ReposUrl
	a.fieldMap["raw"] = a.Raw
	a.fieldMap["access_token"] = a.AccessToken
	a.fieldMap["token_type"] = a.TokenType
	a.fieldMap["refresh_token"] = a.RefreshToken
	a.fieldMap["expiry"] = a.Expiry
	a.fieldMap["token_generated_at"] = a.TokenGeneratedAt
}

func (a authorization) clone(db *gorm.DB) authorization {
	a.authorizationDo.ReplaceDB(db)
	return a
}

type authorizationDo struct{ gen.DO }

func (a authorizationDo) Debug() *authorizationDo {
	return a.withDO(a.DO.Debug())
}

func (a authorizationDo) WithContext(ctx context.Context) *authorizationDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authorizationDo) Clauses(conds ...clause.Expression) *authorizationDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authorizationDo) Not(conds ...gen.Condition) *authorizationDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authorizationDo) Or(conds ...gen.Condition) *authorizationDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authorizationDo) Select(conds ...field.Expr) *authorizationDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authorizationDo) Where(conds ...gen.Condition) *authorizationDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authorizationDo) Order(conds ...field.Expr) *authorizationDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authorizationDo) Distinct(cols ...field.Expr) *authorizationDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authorizationDo) Omit(cols ...field.Expr) *authorizationDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authorizationDo) Join(table schema.Tabler, on ...field.Expr) *authorizationDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authorizationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *authorizationDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authorizationDo) RightJoin(table schema.Tabler, on ...field.Expr) *authorizationDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authorizationDo) Group(cols ...field.Expr) *authorizationDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authorizationDo) Having(conds ...gen.Condition) *authorizationDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authorizationDo) Limit(limit int) *authorizationDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authorizationDo) Offset(offset int) *authorizationDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authorizationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *authorizationDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authorizationDo) Unscoped() *authorizationDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authorizationDo) Create(values ...*model.Authorization) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authorizationDo) CreateInBatches(values []*model.Authorization, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authorizationDo) Save(values ...*model.Authorization) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authorizationDo) First() (*model.Authorization, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Authorization), nil
	}
}

func (a authorizationDo) Take() (*model.Authorization, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Authorization), nil
	}
}

func (a authorizationDo) Last() (*model.Authorization, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Authorization), nil
	}
}

func (a authorizationDo) Find() ([]*model.Authorization, error) {
	result, err := a.DO.Find()
	return result.([]*model.Authorization), err
}

func (a authorizationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Authorization, err error) {
	buf := make([]*model.Authorization, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authorizationDo) FindInBatches(result *[]*model.Authorization, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authorizationDo) Attrs(attrs ...field.AssignExpr) *authorizationDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authorizationDo) Assign(attrs ...field.AssignExpr) *authorizationDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authorizationDo) Joins(field field.RelationField) *authorizationDo {
	return a.withDO(a.DO.Joins(field))
}

func (a authorizationDo) Preload(field field.RelationField) *authorizationDo {
	return a.withDO(a.DO.Preload(field))
}

func (a authorizationDo) FirstOrInit() (*model.Authorization, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Authorization), nil
	}
}

func (a authorizationDo) FirstOrCreate() (*model.Authorization, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Authorization), nil
	}
}

func (a authorizationDo) FindByPage(offset int, limit int) (result []*model.Authorization, count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	if limit <= 0 {
		return
	}

	result, err = a.Offset(offset).Limit(limit).Find()
	return
}

func (a authorizationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a *authorizationDo) withDO(do gen.Dao) *authorizationDo {
	a.DO = *do.(*gen.DO)
	return a
}
