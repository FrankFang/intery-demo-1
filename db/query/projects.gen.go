// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"intery/server/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newProject(db *gorm.DB) project {
	_project := project{}

	_project.projectDo.UseDB(db)
	_project.projectDo.UseModel(&model.Project{})

	tableName := _project.projectDo.TableName()
	_project.ALL = field.NewField(tableName, "*")
	_project.ID = field.NewUint(tableName, "id")
	_project.CreatedAt = field.NewTime(tableName, "created_at")
	_project.UpdatedAt = field.NewTime(tableName, "updated_at")
	_project.DeletedAt = field.NewField(tableName, "deleted_at")
	_project.RepoName = field.NewString(tableName, "repo_name")
	_project.AppKind = field.NewString(tableName, "app_kind")
	_project.RepoHome = field.NewString(tableName, "repo_home")
	_project.UserId = field.NewUint(tableName, "user_id")
	_project.LatestDeploymentId = field.NewUint(tableName, "latest_deployment_id")

	_project.fillFieldMap()

	return _project
}

type project struct {
	projectDo projectDo

	ALL                field.Field
	ID                 field.Uint
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field
	RepoName           field.String
	AppKind            field.String
	RepoHome           field.String
	UserId             field.Uint
	LatestDeploymentId field.Uint

	fieldMap map[string]field.Expr
}

func (p project) As(alias string) *project {
	p.projectDo.DO = *(p.projectDo.As(alias).(*gen.DO))

	p.ALL = field.NewField(alias, "*")
	p.ID = field.NewUint(alias, "id")
	p.CreatedAt = field.NewTime(alias, "created_at")
	p.UpdatedAt = field.NewTime(alias, "updated_at")
	p.DeletedAt = field.NewField(alias, "deleted_at")
	p.RepoName = field.NewString(alias, "repo_name")
	p.AppKind = field.NewString(alias, "app_kind")
	p.RepoHome = field.NewString(alias, "repo_home")
	p.UserId = field.NewUint(alias, "user_id")
	p.LatestDeploymentId = field.NewUint(alias, "latest_deployment_id")

	p.fillFieldMap()

	return &p
}

func (p *project) WithContext(ctx context.Context) *projectDo { return p.projectDo.WithContext(ctx) }

func (p project) TableName() string { return p.projectDo.TableName() }

func (p *project) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f.(field.OrderExpr), true
}

func (p *project) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["repo_name"] = p.RepoName
	p.fieldMap["app_kind"] = p.AppKind
	p.fieldMap["repo_home"] = p.RepoHome
	p.fieldMap["user_id"] = p.UserId
	p.fieldMap["latest_deployment_id"] = p.LatestDeploymentId
}

func (p project) clone(db *gorm.DB) project {
	p.projectDo.ReplaceDB(db)
	return p
}

type projectDo struct{ gen.DO }

func (p projectDo) Debug() *projectDo {
	return p.withDO(p.DO.Debug())
}

func (p projectDo) WithContext(ctx context.Context) *projectDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectDo) Clauses(conds ...clause.Expression) *projectDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectDo) Not(conds ...gen.Condition) *projectDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectDo) Or(conds ...gen.Condition) *projectDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectDo) Select(conds ...field.Expr) *projectDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectDo) Where(conds ...gen.Condition) *projectDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectDo) Order(conds ...field.Expr) *projectDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectDo) Distinct(cols ...field.Expr) *projectDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectDo) Omit(cols ...field.Expr) *projectDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectDo) Join(table schema.Tabler, on ...field.Expr) *projectDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *projectDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectDo) RightJoin(table schema.Tabler, on ...field.Expr) *projectDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectDo) Group(cols ...field.Expr) *projectDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectDo) Having(conds ...gen.Condition) *projectDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectDo) Limit(limit int) *projectDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectDo) Offset(offset int) *projectDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *projectDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectDo) Unscoped() *projectDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectDo) Create(values ...*model.Project) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectDo) CreateInBatches(values []*model.Project, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectDo) Save(values ...*model.Project) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectDo) First() (*model.Project, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Project), nil
	}
}

func (p projectDo) Take() (*model.Project, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Project), nil
	}
}

func (p projectDo) Last() (*model.Project, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Project), nil
	}
}

func (p projectDo) Find() ([]*model.Project, error) {
	result, err := p.DO.Find()
	return result.([]*model.Project), err
}

func (p projectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Project, err error) {
	buf := make([]*model.Project, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectDo) FindInBatches(result *[]*model.Project, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectDo) Attrs(attrs ...field.AssignExpr) *projectDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectDo) Assign(attrs ...field.AssignExpr) *projectDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectDo) Joins(field field.RelationField) *projectDo {
	return p.withDO(p.DO.Joins(field))
}

func (p projectDo) Preload(field field.RelationField) *projectDo {
	return p.withDO(p.DO.Preload(field))
}

func (p projectDo) FirstOrInit() (*model.Project, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Project), nil
	}
}

func (p projectDo) FirstOrCreate() (*model.Project, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Project), nil
	}
}

func (p projectDo) FindByPage(offset int, limit int) (result []*model.Project, count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	if limit <= 0 {
		return
	}

	result, err = p.Offset(offset).Limit(limit).Find()
	return
}

func (p projectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p *projectDo) withDO(do gen.Dao) *projectDo {
	p.DO = *do.(*gen.DO)
	return p
}
